@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Microsoft.Extensions.Logging 
@using System.Security.Claims
@using MrBigHead.Shared
@using MrBigHead.Web.Services

@inject ILogger<LoginDisplay> logger
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject UserInformationProvider UserInformationProvider

<AuthorizeView>
    <Authorized>
        Hello, @context?.User?.Identity?.Name! 
        - - 
        <button class="nav-link btn btn-link" @onclick="BeginLogout">Log out</button>
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private ClaimsPrincipal User { get; set; } 
    private UserInformation userInformation { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var state = await authenticationState;
        User = state.User;

        foreach (var claim in User.Claims)
        {
            await Console.Out.WriteLineAsync($"claim: {claim.Type} Value: {claim.Value}");
        }

        userInformation = await UserInformationProvider.GetUserInformation(User);

        if (userInformation is not null)
        {
            Console.WriteLine($"username: {userInformation.UserName}");
            Console.WriteLine($"image: {userInformation.ImageUrl}");
        }
        else
        {
            Console.WriteLine("null userinformation");
        }

        await base.OnInitializedAsync();
    }

    private async Task BeginLogout(MouseEventArgs args)
    {
        logger.LogInformation($"Logging out: something");
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
}
